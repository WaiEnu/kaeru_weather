{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","geocodeRequest","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","weatherRequest","lat","lon","a","url","fetch","then","response","json","data","setState","country","sys","city","name","temp","main","icon","weather","description","loadong","catch","err","setErr","console","log","state","undefined","this","position","coords","latitude","longitude","timerID","setInterval","clearInterval","id","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uPA2HeA,G,8DAtHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA0BRC,eAAiB,WACf,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GACpCC,UAAUC,YAAYC,mBAAmBJ,EAASC,OA7BnC,EAiCnBI,eAjCmB,uCAiCF,WAAOC,EAAIC,GAAX,eAAAC,EAAA,4DACA,kDACH,SACE,mCACRC,EAJS,UACA,kDADA,gBAIcH,EAJd,gBAIyBC,EAJzB,kBAEH,SAFG,kBAGD,oCAHC,SAKTG,MAAMD,GACXE,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZC,QAASF,EAAKG,IAAID,QAClBE,KAAMJ,EAAKK,KACXC,KAAMN,EAAKO,KAAKD,KAChBE,KAAMR,EAAKS,QAAQ,GAAGD,KACtBE,YAAaV,EAAKS,QAAQ,GAAGC,YAC7BlB,IAAKA,EACLC,IAAKA,EACLkB,SAAQ,OAGXC,OAAM,SAACC,GACN,EAAKC,OAAOtB,EAAIC,GAChBsB,QAAQC,IAAIH,MAvBC,2CAjCE,wDAEjB,EAAKI,MAAQ,CACXb,KAAO,OACPF,QAAU,OACVI,KAAO,IACPI,YAAc,gBACdF,UAAMU,EACN1B,SAAK0B,EACLzB,SAAKyB,EACLP,SAAQ,GAVO,E,mDAcZnB,EAAIC,GACT0B,KAAKlB,SAAS,CACZC,QAAU,OACVE,KAAO,OACPE,KAAO,MACPI,YAAc,QACdF,UAAMU,EACN1B,IAAKA,EACLC,IAAKA,EACLkB,SAAQ,M,0CAqCS,IAAD,OAClBQ,KAAKnC,iBACJa,MAAK,SAACuB,GACL,EAAK7B,eAAe6B,EAASC,OAAOC,SAAUF,EAASC,OAAOE,cAE/DX,OAAM,SAACC,GACN,EAAKC,OAAO,EAAKG,MAAMzB,IAAI,EAAKyB,MAAMxB,KACtCsB,QAAQC,IAAIH,MAEdM,KAAKK,QAAUC,aACb,kBACA,EAAKlC,eAAe,EAAK0B,MAAMzB,IAAK,EAAKyB,MAAMxB,OAC/C,O,6CAKFiC,cAAcP,KAAKK,W,+BAGX,IAAD,EACsDL,KAAKF,MAA1Df,EADD,EACCA,QAASE,EADV,EACUA,KAAME,EADhB,EACgBA,KAAME,EADtB,EACsBA,KAAME,EAD5B,EAC4BA,YAAalB,EADzC,EACyCA,IAAKC,EAD9C,EAC8CA,IACrD,OAAKD,GAAQC,EAST,yBAAKkC,GAAG,OACN,yBAAKC,UAAU,YACb,wBAAIA,UAAU,qBACZ,0BAAMA,UAAU,QAAQxB,GACxB,sCACA,0BAAMwB,UAAU,WAAW1B,IAE7B,uBAAG0B,UAAU,QACVpB,GACC,uBAAGoB,UAAS,kBAAapB,OAK/B,yBAAKoB,UAAU,eACX,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,UAAUtB,GACxB,wCAEF,yBAAKsB,UAAU,2BAA2BlB,KA1BhD,yBAAKiB,GAAG,OACN,gD,GAtFQE,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H5C,kBAAmBnD,WACrBA,UAAUoD,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.fed60ef7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/owf-font.css';\r\nimport './css/Weather.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      city : \"Time\",\r\n      country : \"Zone\",\r\n      temp : \"0\",\r\n      description : \"It's freezing\",\r\n      icon: undefined,\r\n      lat: undefined,\r\n      lon: undefined,\r\n      loadong:false,\r\n    };\r\n  }\r\n\r\n  setErr(lat,lon){\r\n    this.setState({\r\n      country : \"Time\",\r\n      city : \"Zone\",\r\n      temp : \"???\",\r\n      description : \"Error\",\r\n      icon: undefined,\r\n      lat: lat,\r\n      lon: lon,\r\n      loadong:false,\r\n    });\r\n  }\r\n\r\n  geocodeRequest = () => {\r\n    return new Promise(function (resolve, reject) {\r\n      navigator.geolocation.getCurrentPosition(resolve, reject);\r\n    });\r\n  }\r\n\r\n  weatherRequest = async (lat,lon) => {\r\n    const URL_BASE=\"https://api.openweathermap.org/data/2.5/weather\";\r\n    const UNITS=\"metric\";\r\n    const API_KEY=\"abf7bb42eee05588c0f5ed53510c5de5\";\r\n    const url=`${URL_BASE}?lat=${lat}&lon=${lon}&units=${UNITS}&appid=${API_KEY}`;\r\n    await fetch(url)\r\n    .then((response) => {\r\n      return response.json()\r\n    })\r\n    .then((data) => {\r\n      this.setState({\r\n        country: data.sys.country,\r\n        city: data.name,\r\n        temp: data.main.temp,\r\n        icon: data.weather[0].icon,\r\n        description: data.weather[0].description,\r\n        lat: lat,\r\n        lon: lon,\r\n        loadong:false,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      this.setErr(lat,lon);\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.geocodeRequest()\r\n    .then((position) => {\r\n      this.weatherRequest(position.coords.latitude, position.coords.longitude)\r\n    })\r\n    .catch((err) => {\r\n      this.setErr(this.state.lat,this.state.lon);\r\n      console.log(err);\r\n    });\r\n    this.timerID = setInterval(        \r\n      () => \r\n      this.weatherRequest(this.state.lat, this.state.lon),\r\n      6000000\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  render() {\r\n    const { country, city, temp, icon, description, lat, lon } = this.state;\r\n    if (!lat || !lon) {\r\n      return (\r\n        <div id=\"app\">\r\n          <div>Loading...</div>\r\n        </div>\r\n      );      \r\n    }\r\n    else {\r\n      return (\r\n        <div id=\"app\">\r\n          <div className=\"location\">\r\n            <h1 className=\"location-timezone\">\r\n              <span className=\"city\">{city}</span>\r\n              <span>&nbsp;</span>\r\n              <span className=\"country\">{country}</span>\r\n            </h1>\r\n            <p className=\"icon\">\r\n              {icon && (\r\n                <i className={`owf owf-${icon}`}></i>\r\n                // <img src={`http://openweathermap.org/img/w/${icon}.png`} alt=\"weather icon\"/>\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"temperature\">\r\n              <div className=\"degree-section\">\r\n                <h2 className=\"degree\">{temp}</h2>\r\n                <span>Â°C</span>\r\n              </div>\r\n              <div className=\"temperature-description\">{description}</div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App /> ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}